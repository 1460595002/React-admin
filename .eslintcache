[{"E:\\q-Code\\gulimall-react-admin_client\\src\\index.js":"1","E:\\q-Code\\gulimall-react-admin_client\\src\\App.js":"2","E:\\q-Code\\gulimall-react-admin_client\\src\\pages\\Login\\Login.jsx":"3","E:\\q-Code\\gulimall-react-admin_client\\src\\pages\\Admin\\Admin.jsx":"4","E:\\q-Code\\gulimall-react-admin_client\\src\\utils\\memoryUtils.jsx":"5","E:\\q-Code\\gulimall-react-admin_client\\src\\utils\\storageUtils.jsx":"6","E:\\q-Code\\gulimall-react-admin_client\\src\\api\\index.js":"7","E:\\q-Code\\gulimall-react-admin_client\\src\\api\\ajax.js":"8"},{"size":229,"mtime":1613791431268,"results":"9","hashOfConfig":"10"},{"size":585,"mtime":1613791431250,"results":"11","hashOfConfig":"10"},{"size":4531,"mtime":1613791431272,"results":"12","hashOfConfig":"10"},{"size":417,"mtime":1613791431270,"results":"13","hashOfConfig":"10"},{"size":124,"mtime":1613791431281,"results":"14","hashOfConfig":"10"},{"size":554,"mtime":1613791431282,"results":"15","hashOfConfig":"10"},{"size":5418,"mtime":1613791431263,"results":"16","hashOfConfig":"10"},{"size":1349,"mtime":1613791431253,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8j1ggy",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"E:\\q-Code\\gulimall-react-admin_client\\src\\index.js",[],"E:\\q-Code\\gulimall-react-admin_client\\src\\App.js",[],["38","39"],"E:\\q-Code\\gulimall-react-admin_client\\src\\pages\\Login\\Login.jsx",["40","41","42","43","44"],"import React, { Component } from 'react'\r\nimport './login.less'\r\nimport logo from './images/logo.png'\r\nimport { Form, Input, Button, Checkbox,Icon } from 'antd';\r\nimport storageUtils from '../../utils/storageUtils'\r\nimport memoryUtils from '../../utils/memoryUtils'\r\nimport {reqLogin} from \"../../api\"\r\nconst Item = Form.Item\r\n/**\r\n * 登录组件\r\n *   校验：\r\n *        用户名/密码的的合法性要求 \r\n *        1). 必须输入 \r\n *        2). 必须大于等于 4 位 \r\n *        3). 必须小于等于 12 位 \r\n *        4). 必须是英文、数字或下划线组成\r\n */\r\nclass Login extends Component {\r\n\r\n  /*登陆*/\r\n  login = (e) => {\r\n    // 阻止事件默认行为(不提交表单) \r\n    e.preventDefault()\r\n    // 进行表单所有控件的校验 \r\n    this.props.form.validateFields(async (err, values) => {\r\n      if (!err) {\r\n        // 校验成功\r\n        const { username, password } = values\r\n        console.log('提交登陆请求', username, password)\r\n      } else {\r\n        // 校验失败 \r\n        console.log(err)\r\n      }\r\n    })\r\n  }\r\n\r\n  /*** 自定义表单的校验规则 */\r\n  validator = (rule, value, callback) => {\r\n\r\n    // console.log(rule, value)\r\n    const length = value && value.length\r\n    const pwdReg = /^[a-zA-Z0-9_]+$/\r\n    if (!value) {\r\n      // callback 如果不传参代表校验成功，如果传参代表校验失败，并且会提示错误\r\n\r\n      callback('必须输入密码')\r\n    } else if (length < 4) {\r\n      callback('密码必须大于 4 位')\r\n    } else if (length > 12) {\r\n      callback('密码必须小于 12 位')\r\n    } else if (!pwdReg.test(value)) {\r\n      callback('密码必须是英文、数组或下划线组成')\r\n    } else {\r\n      callback() // 必须调用 callback\r\n\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * @param {}} values \r\n   */\r\n\r\n  onFinish = (values) => {\r\n    console.log('Received values of form: ', values);\r\n  };\r\n\r\n  render() {\r\n  // 得到具有强大功能的form对象\r\n  const form = this.props.form;\r\n  const {getFieldDecorator} = form;\r\n    return (\r\n      <div className=\"login\">\r\n        <header className=\"login-header\">\r\n          <img src={logo} alt=\"log\" />\r\n          <h1>React后台管理项目</h1>\r\n        </header>\r\n        <section className=\"login-content\">\r\n          <h2>用户登录</h2>\r\n          <Form\r\n            name=\"normal_login\"\r\n            className=\"login-form\"\r\n            initialValues={{ remember: true }}\r\n            onFinish={this.onFinish}\r\n            onSubmit={this.login}\r\n          >\r\n            <Item\r\n              name=\"username\"\r\n              rules={[{ required: true, message: '请输入用户名!' }]}\r\n            >\r\n              {\r\n                getFieldDecorator('username', {\r\n                  // 根据内置验证规则进行声明式验证\r\n                  rules: [\r\n                    {required: true, whitespace: true, message: '必须输入用户名'},\r\n\r\n                    {min: 4, message: '用户名必须大于 4 位'},\r\n                     {max: 12, message: '用户名必须小于 12 位'},\r\n                     {pattern: /^[a-zA-Z0-9_]+$/, message: '用户名必须是英文、数组或下划线 组成'}\r\n                  ]\r\n                })(\r\n                  <Input prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"请输入用户名称\" style={{ color: 'rgba(0,0,0,.25)' }} />\r\n                  )\r\n              }\r\n            </Item>\r\n            <Item\r\n              name=\"password\"\r\n              rules={[{ required: true, message: '请输入密码!' }]}\r\n            >\r\n              {\r\ngetFieldDecorator('password', {\r\n  rules: [\r\n// 自定义表单校验规则\r\n{validator: this.validator}\r\n\r\n  ]\r\n})(\r\n  <Input\r\n      prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n      type=\"password\"\r\n      placeholder=\"Password\"\r\n  />,\r\n)}\r\n             \r\n            </Item>\r\n            <Item>\r\n              <Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n                <Checkbox>记住密码：</Checkbox>    <a className=\"login-form-forgot\" href=\"\">\r\n                忘记密码？\r\n        </a>\r\n              </Item>\r\n              <Item>\r\n              <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                登录\r\n        </Button>\r\n              <a href=\"\"> 注册</a>\r\n            </Item>\r\n            </Item>\r\n         \r\n          </Form>\r\n        </section>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Form.create()(Login)","E:\\q-Code\\gulimall-react-admin_client\\src\\pages\\Admin\\Admin.jsx",[],"E:\\q-Code\\gulimall-react-admin_client\\src\\utils\\memoryUtils.jsx",["45"],"/*\r\n用来在内存保存一些数据的工具模块\r\n */\r\nexport default {\r\n    user: {}, // 保存当前登陆的user\r\n  }","E:\\q-Code\\gulimall-react-admin_client\\src\\utils\\storageUtils.jsx",["46"],"/*\r\n进行local数据存储管理的工具模块\r\n */\r\nimport store from 'store'\r\nconst USER_KEY = 'user_key'\r\nexport default {\r\n  /*\r\n  保存user\r\n   */\r\n  saveUser (user) {\r\n    // localStorage.setItem(USER_KEY, JSON.stringify(user))\r\n    store.set(USER_KEY, user)\r\n  },\r\n\r\n  /*\r\n  读取user\r\n   */\r\n  getUser () {\r\n    // return JSON.parse(localStorage.getItem(USER_KEY) || '{}')\r\n    return store.get(USER_KEY) || {}\r\n  },\r\n\r\n  /*\r\n  删除user\r\n   */\r\n  removeUser () {\r\n    // localStorage.removeItem(USER_KEY)\r\n    store.remove(USER_KEY)\r\n  }\r\n}","E:\\q-Code\\gulimall-react-admin_client\\src\\api\\index.js",[],"E:\\q-Code\\gulimall-react-admin_client\\src\\api\\ajax.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":5,"column":8,"nodeType":"53","messageId":"54","endLine":5,"endColumn":20},{"ruleId":"51","severity":1,"message":"55","line":6,"column":8,"nodeType":"53","messageId":"54","endLine":6,"endColumn":19},{"ruleId":"51","severity":1,"message":"56","line":7,"column":9,"nodeType":"53","messageId":"54","endLine":7,"endColumn":17},{"ruleId":"57","severity":1,"message":"58","line":129,"column":47,"nodeType":"59","endLine":129,"endColumn":88},{"ruleId":"57","severity":1,"message":"58","line":137,"column":15,"nodeType":"59","endLine":137,"endColumn":26},{"ruleId":"60","severity":1,"message":"61","line":4,"column":1,"nodeType":"62","endLine":6,"endColumn":4},{"ruleId":"60","severity":1,"message":"61","line":6,"column":1,"nodeType":"62","endLine":30,"endColumn":2},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'storageUtils' is defined but never used.","Identifier","unusedVar","'memoryUtils' is defined but never used.","'reqLogin' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]